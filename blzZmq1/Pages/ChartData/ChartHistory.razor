@page "/chartdata/charthistory"

@* Usings *@
@using blzZmq1.Services
@using blzZmq1.Components
@using blzZmq1.Services.ChartData
@using Core.Daily
@using System.IO

@* Injects *@
@inject IDailyChartService DailyChartService


<h3>Monica Results</h3>

@if (dirsLenght > 0)
{
<div class="form-group">
    <select class="form-control p-2 m-2" @onchange="ChangeFile">
        <option value="">Select a file</option>
        @for (int i = (dirsLenght > 10) ? dirsLenght - 10 : 0; i < dirsLenght; i++)
        {
            var fileIndex = i;
            <option value=@dirs[fileIndex]>@System.IO.Path.GetFileNameWithoutExtension(dirs[fileIndex])</option>
        }
    </select>
    @if (_selectedFile != null)
    {
        <div class="alert-dark m-1 rounded small">
            <table class="table">
                <thead>
                    <tr>
                        <th>Result Name</th>
                        <th>Created Time</th>
                        <th>Result Size (KB)</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>@System.IO.Path.GetFileNameWithoutExtension(_selectedFile)</td>
                        <td>@System.IO.File.GetCreationTime(System.IO.Path.GetFullPath(_selectedFile))</td>    
                        <td>@GetTheLength()</td>
                    </tr>
                </tbody>
            </table>
        </div>
        <div class="alert-info p-2 m-1 rounded"><button type="button" class="btn btn-success" @onclick="@(() => LoadDailyChartAsync())">Daily Chart</button> 
        <a class="btn btn-success" target="_blank" href="@System.IO.Path.ChangeExtension(_selectedFile.Substring(_selectedFile.IndexOf("/")) , "csv")">CSV file</a></div>
    }
</div>
}

    @*<SpinLoader IsLoading="isLoading">
            <LoadingTemplate>
                <Chase Center="true"></Chase>
            </LoadingTemplate>
            <ContentTemplate>
                <Highchart Json="@chartjson">
                </Highchart>
            </ContentTemplate>
        </SpinLoader>*@

    @switch (_chartType)
    {
        case ChartType.Daily:
            <DailyChart @bind-DailyData="ParentDailyData"></DailyChart>
            break;
        default:
            break;
    }



    @code{
        int selectedButton;
        string str;
        string filesTable = "";
        int dirsLenght;
        string[] dirs;
        long length;


        private long GetTheLength()
        {
            length = new System.IO.FileInfo(System.IO.Path.GetFullPath(_selectedFile)).Length / 1024;
            return (length);
        }

        protected override void OnInitialized()
        {
            base.OnInitialized();
            dirs = Directory.GetFiles(@"wwwroot/export/", "*.json");
            dirsLenght = dirs.Length;
        }


        private enum ChartType { None, Daily };
        private bool isLoading = true;
        //private DailyData _dailyData = null;
        private ChartType _chartType = ChartType.None;
        private string _selectedFile;
        private string chartjson;

        //public string jsonToChartPath = "Data/fromServer.json";
        //public string jsonToChartPath = "wwwroot/export/fromServer.json";

        [Parameter]
        public DailyData ParentDailyData { get; set; } = null;


        private void UnloadChart()
        {
            _chartType = ChartType.None;
        }

        private async Task LoadDailyChartAsync()
        {
            ParentDailyData = await DailyChartService.GetDailyChartDataAsync(_selectedFile);
            _chartType = ChartType.Daily;
        }

        private void ChangeFile(ChangeEventArgs e)
        {
            _selectedFile = e.Value.ToString();
            UnloadChart();
        }



        //protected override async Task OnInitializedAsync()
        protected override async Task OnAfterRenderAsync(bool firstRender)
        {
            if (firstRender)
            {
                //await DrawChart();
            }
            if (isLoading)  // prevent a forever loop
            {
                isLoading = false;
                StateHasChanged();
            }
            //isLoading = false;
            //StateHasChanged();
        }

    }
