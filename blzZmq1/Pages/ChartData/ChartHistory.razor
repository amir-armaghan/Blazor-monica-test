@page "/chartdata/charthistory"
@* Usings *@
@using blzZmq1.Services
@using blzZmq1.Components
@using blzZmq1.Services.ChartData
@using Core.Daily
@using System.IO

@* Injects *@
@inject IDailyChartService DailyChartService


<h3>Daily Chart</h3>

<div class="form-group">
    <select class="form-control" @bind="selectedButton">
        @for (int i = (dirsLenght > 10) ? dirsLenght - 10 : 0; i < dirsLenght; i++)
        {
            var buttonNumber = i;
            <option value=@System.IO.Path.GetFileNameWithoutExtension(dirs[i])>@System.IO.Path.GetFileNameWithoutExtension(dirs[i])</option>
        }
    </select>
    <div><button @onclick="@(() => LoadChart(selectedButton))">Load Chart</button></div>

</div>
<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Download CSV</th>
            <th>Load Chart</th>
        </tr>
    </thead>
    <tbody>
        @for (int i = (dirsLenght > 10) ? dirsLenght - 10 : 0; i < dirsLenght; i++)
        {
            var buttonNumber = i;
            <tr>
                <td>@System.IO.Path.GetFileNameWithoutExtension(dirs[i])</td>
                <td><a href="@System.IO.Path.ChangeExtension(dirs[i].Substring(dirs[i].IndexOf("/")), "csv")">CSV file</a></td>
                <td><button @onclick="@(() => LoadChart(buttonNumber))">Load Chart</button></td>
            </tr>

        }
    </tbody>
</table>

<SpinLoader IsLoading="isLoading">
    <LoadingTemplate>
        <Chase Center="true"></Chase>
    </LoadingTemplate>
    <ContentTemplate>
        <Highchart Json="@chartjson">
        </Highchart>
    </ContentTemplate>
</SpinLoader>



@code{
    int selectedButton;
    string str;
    string filesTable = "";
    int dirsLenght;
    string[] dirs;
    protected override void OnInitialized()
    {
        base.OnInitialized();
        dirs = Directory.GetFiles(@"wwwroot/export/", "*.json");
        dirsLenght = dirs.Length;
    }



    Boolean isLoading = true;
    private DailyData dailyData = null;
    string chartjson;
    //public string jsonToChartPath = "Data/fromServer.json";
    public string jsonToChartPath = "wwwroot/export/fromServer.json";

    protected async Task LoadChart(int item)
    {
        isLoading = true;
        StateHasChanged();
        // get back the file name from item number:
        jsonToChartPath = dirs[item];
        await DrawChart();
        isLoading = false;
        StateHasChanged();


    }
    async Task GetListOfFiles()
    {

    }

    //protected override async Task OnInitializedAsync()
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await DrawChart();
        }
        if (isLoading)  // prevent a forever loop
        {
            isLoading = false;
            StateHasChanged();
        }
        //isLoading = false;
        //StateHasChanged();
    }

    protected async Task DrawChart()
    {

        dailyData = await DailyChartService.GetDailyChartDataAsync(jsonToChartPath);

        string chartTypeName = "area";  // has to get from json
        string chartTitleName = "Monica Model from json message";
        string chartOrigSpec = "Daily";

        string xAxsis = "";


        for (int i = 0; i < dailyData.Dates.Count; i++)
        {
            xAxsis += "'" + dailyData.Dates[i] + "' , ";
        }

        Boolean isFirstSerie = true;
        string series = "[";
        foreach (var outputId in dailyData.DailyOutputIds)
        {
            if (outputId.Name == Core.Share.MonicaConstFields.Crop)
                continue;

            series += "{ name: '" + outputId.Name + "', data: [";

            for (int i = 0; i < outputId.Results.Count; i++)
            {
                series += outputId.Results[i].ToString().Replace(",", ".") + " , ";
            }

            // Only enable the first serie & let the user enable the rest if wants
            //series += "], visible: false },";
            series += "]";
            if (isFirstSerie)
            {
                series += " },";
                isFirstSerie = false;
            }
            else
            {
                series += ", visible: false },";
            }

        }
        series += "]";

        chartjson = @" {
chart: {
zoomType: 'x',
height: 600,
type: '" + chartTypeName + @"',

},
colors: [
'#063c75',
'#1c8c44',
'#881452',
'#280137',
'#63a194',
'#2c3539',
'#428bca',
'#d9534f',
'#96ceb4',
'#80699B',
'#3D96AE',
'#DB843D',
'#92A8CD',
'#A47D7C',
'#B5CA92'],
loading: {
hideDuration: 1000,
showDuration: 1000
},
title: {
text: '" + chartTitleName + @"'
},

subtitle: {
text: '" + chartOrigSpec + @"'
},

yAxis: {
title: {
text: ' '
},
maxZoom: 2
},

xAxis: {
title: {
text: 'Date'
},
categories: [" + xAxsis + @"],
},

legend: {
layout: 'vertical',
align: 'right',
verticalAlign: 'middle'
},

plotOptions: {
area: {
fillColor: {
linearGradient: {
x1: 0,
y1: 0,
x2: 0,
y2: 0.6
},
stops: [
    [0, Highcharts.getOptions().colors[0]],
    [1, Highcharts.color(Highcharts.getOptions().colors[0]).setOpacity(0).get('rgba')]
]
},
marker: {
radius: 2
},
lineWidth: 1,
states: {
hover: {
lineWidth: 1
}
},
threshold: null
}
},

series:" + series + @",

responsive: {
rules: [{
condition: {
maxWidth: 500
},
chartOptions: {
legend: {
layout: 'horizontal',
align: 'center',
verticalAlign: 'bottom'
}
}
}]
},
navigation: {
buttonOptions: {
align: 'right'
}
},
exporting: {
sourceWidth: 1600,
scale: 1
},


}";
    }
}