@page "/capnptest"
@using blzZmq1.Services
@using Capnp.Rpc   
@using Mas.Rpc
@inject IFileUpload fileUpload
<h3>FileInput</h3>  
<InputFile OnChange="HandleFileSelected" />
@if (file != null)
{
    <p>@env</p>  ////capnp by Michael
    <p>Name: @file.Name</p>
    <p>Size in bytes: @file.Size</p>
    <p>File type: @file.Type</p>
    <p>Last modified date: @file.LastModified.ToShortDateString()</p>
    <p>Number of lines read: @numLines</p>
    <button @onclick="CountLines">Send via ZMQ and show the content</button>

    <p class="fixwidth">@fileTextContents</p>
}
@code {


    private Capnp.Rpc.TcpRpcClient EnvClient;   //capnp by Michael
    private String env = "nothing"; //capnp by Michael

    int numLines;
    IFileListEntry file;
    string fileTextContents;

    async Task HandleFileSelected(IFileListEntry[] files)
    {
        if (EnvClient == null)  //capnp by Michael
        {
            EnvClient = new TcpRpcClient("localhost", 9999);
            await Task.WhenAll(EnvClient.WhenConnected);
        }

        if (EnvClient.State == ConnectionState.Active)  //capnp by Michael
        {
            var envService = EnvClient.GetMain<Mas.Rpc.Monica.IEnv>();

            env = await envService.Create("bla", "bli", "blo");
        }

        file = files.FirstOrDefault();

        // the upload process: // if don't use it, the file is on the client memory. That is why we use Async methods.
        using (var reader = new StreamReader(file.Data))
        {
            fileTextContents = await reader.ReadToEndAsync();
        }

        //push msg here...

        if (file != null)
        {
            await fileUpload.UploadAsync(file);
        }
        using (var producer = new PushSocket())
        //using (var producer = new RequestSocket())
        {
            producer.Connect("tcp://localhost:6666");
            producer.SendFrame(fileTextContents);
            //string text1 = "push message from blazor";
            // producer.SendFrame(text1);
            //var message = producer.ReceiveFrameString();
            System.Threading.Thread.Sleep(5000);  // it needs some time to send the request so made a delay

        }

    }
    async Task CountLines() // read number of lines
    {
        numLines = 0;
        using (var reader = new System.IO.StreamReader(file.Data))
        {
            while (await reader.ReadLineAsync() != null)
            {
                numLines++;
            }
        }
    }

}
