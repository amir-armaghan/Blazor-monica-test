@page "/setting"
@using System.IO;
@using System.Linq;
@using blzZmq1.Services

@inject blzZmq1.Services.Github.IGithubService GithubService
@inject IUserSettingsService UserSettingsService
@inject IJSRuntime JSRuntime 

<h3>Setting</h3>

<label for="basic-url">Your ZeroMQ server Address</label>
<div class="input-group mb-3">
    <div class="input-group-prepend">
        <span class="input-group-text" id="basic-addon3">Server Push Address:</span>
    </div>
    <input type="text" class="form-control" aria-describedby="basic-addon3" value="@UserSettingsService.ServerPushAddress" @onchange="@(e => UpdateSetting(e, "ServerPushAddress"))">
</div>
<div class="input-group mb-3">
    <div class="input-group-prepend">
        <span class="input-group-text" id="basic-addon3">Server Push Port:</span>
    </div>
    <input class="form-control" aria-describedby="basic-addon3" value="@UserSettingsService.ServerPushPort" @onchange="@(e => UpdateSetting(e, "ServerPushPort"))">
</div>
@UserSettingsService.ServerPushPort
<div class="input-group mb-3">
    <div class="input-group-prepend">
        <span class="input-group-text" id="basic-addon3">Server Pull Address:</span>
    </div>
    <input type="text" class="form-control" aria-describedby="basic-addon3" value="@UserSettingsService.ServerPullAddress" @onchange="@(e => UpdateSetting(e, "ServerPullAddress"))">
</div>
<div class="input-group mb-3">
    <div class="input-group-prepend">
        <span class="input-group-text" id="basic-addon3">Server Pull Port:</span>
    </div>
    <input type="number" class="form-control" aria-describedby="basic-addon3" @bind="UserSettingsService.ServerPullPort">
</div>
<p> </p>
<label for="basic-url">Your gitHub authentication information</label>
<div class="input-group mb-3">
    <div class="input-group-prepend">
        <span class="input-group-text" id="basic-addon3">User Name:</span>
    </div>
    <input disabled type="text" class="form-control" aria-describedby="basic-addon3" @bind="UserSettingsService.GithubUserName">
</div>
<div class="input-group mb-3">
    <div class="input-group-prepend">
        <span class="input-group-text" id="basic-addon3">Password:</span>
    </div>
    <input disabled type="password" class="form-control" aria-describedby="basic-addon3" @bind="UserSettingsService.GithubPassword">
</div>
<div class="input-group mb-3">
    <div class="input-group-prepend">
        <span class="input-group-text" id="basic-addon3">Monica-Parameters path on github:</span>
    </div>
    @if (UserSettingsService.MonicaPathOnGitIsValid == false || UserSettingsService.MonicaResultsPathOnGithub == "") //show proper icon when is Not valid
    {
        <div class="input-group-prepend tooltip2">
            <span class="input-group-text tooltip2" id="basic-addon3">&#9888;</span>
            <span class="tooltiptext">
                <strong>Only After logging-in:</strong> <br />
                Please enter your github repository Address which contains "monica parameters" in its root <br />
                Do not add Slash (/) at the begining or at the end of this address. <br />
                After entering the path, click on "Validate the path" button.
            </span>
        </div>
    }
    else // when path is valid
    {
        <div class="input-group-prepend">
            <span class="input-group-text" id="basic-addon3">&#10004;</span>
        </div>
    }
    <input type="text" class="form-control" aria-describedby="basic-addon3" @bind="UserSettingsService.MonicaResultsPathOnGithub" @oninput="@PathChangedAsync">
    <div class="input-group-prepend">
        <button class="btn btn-info btn-sm rounded-right" type="button" @onclick="GithubPathValidation">Validate the path</button>
    </div>
</div>
<h3>What to do whith results</h3>
@*@if (UserSettingsService.MonicaPathOnGitIsValid == true)
{
    <RadzenRadioButtonList @bind-Value="UserSettingsService.SaveResultInGit" TValue="Boolean" Orientation="Orientation.Vertical" Change="@((args) => Change(args))">
        <Items>
            <RadzenRadioButtonListItem Text="Save in my github (Good to have a history of my results)" Value=true />
            <RadzenRadioButtonListItem Text="Just show me the download link (I will manage how to keep it myself)" Value=false />
        </Items>
    </RadzenRadioButtonList>
}
else
{
    UserSettingsService.SaveResultInGit = false;
    <RadzenRadioButtonList @bind-Value="UserSettingsService.SaveResultInGit" TValue="Boolean" Orientation="Orientation.Vertical" Change="@((args) => Change(args))">
        <Items>
            <span Style="color:#A0A0A0;">&#128280;  Save in my github (Good to have a history of my results)</span>
            <span style="color:#ff8080;">&nbsp; Enter and validate your github path above, to Enable this option</span>
            <RadzenRadioButtonListItem Text="Just show me the download link (I will manage how to keep it myself)" Value=false />
        </Items>
    </RadzenRadioButtonList>

}*@
<!-- <button @onclick="Login"></button>
<p>Logged in: @result</p>-->
@code {

    Boolean value;

    void Change(bool value)
    {
        // do something
    }

    void GithubPathValidation()
    {
        if (UserSettingsService.MonicaResultsPathOnGithub != "")
            UserSettingsService.MonicaPathOnGitIsValid = GithubService.IsExistPath(UserSettingsService.MonicaResultsPathOnGithub);
    }

    private void PathChangedAsync(ChangeEventArgs args)
    {
        UserSettingsService.MonicaPathOnGitIsValid = false;
    }

    async Task UpdateSetting(ChangeEventArgs e, string propertyName)
    {
        await JSRuntime.InvokeAsync<string>("UserCookies.WriteCookie", propertyName, e.Value, null);
    }



    /*Boolean result;
    void Login()
    {
        blzZmq1.Services.Github.IGithubService g = new blzZmq1.Services.Github.GitHubParameters();
        result = g.Login();
    }*/


    // // it is supposed later makeing this code to read settings from an ini file. Not sure if it is a good idea
    /*private const String ConfigFileName = "Config.ini";


    public Dictionary<string, string> readConfigFile()
    {
        var lines = File.ReadAllLines(ConfigFileName);
        Dictionary<string, string> dict = new Dictionary<string, string>();
        foreach (string s in lines)
        {
            string[] split = s.Split("=");
            dict.Add(split[0], split[1]);
        }

        return dict;
    }*/

    // //string s = string.Join(";", dict.Select(x => x.Key + "=" + x.Value).ToArray());

}
