@page "/"
@using blzZmq1.Services
@using blzZmq1.Services.Github
@using Core.Share

@inherits Shared.BasePage

@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IGithubService GithubService

<h1>Blazor interface for Monica</h1>
Using ZeroMQ for Producer-Consumer
<br />

@if (isUserLoggedInGithub)
{
    <span>User logged in</span>
}

<SurveyPrompt Title="-- " />
<p>
    <h2>Road Map</h2>
    <ul>
        <li>Choose between Monica results on Github or just downlaod</li>
        <li>Chart Loading problem for chart selection page</li>
        <li>Chart Selection bugs must be fixed</li>
        <li>Add Help</li>
        <li>Capnp version of Blazor to send and recieve data</li>
        <li>Optimise interface</li>
    </ul>
</p>
<hr />
<div class="row m-3">
    <div class="col-md-6">
        <h3>Login into your github</h3>
        @if (!UserSetting.GithubLoggedIn)
        {
            <RadzenCard>
                <RadzenLogin AllowRegister="false" AllowResetPassword="false" Login="@((args) => Login(args, "Github Authentication"))" Style="margin-bottom: 20px;" />
            </RadzenCard>
        }
        else
        {
            <span class="bg-success p-2 m-2 rounded">Logged in successfully</span>
            <p class="m-2 p-2">
                <button class="btn btn-danger btn-sm" type="button" @onclick="(() => Logout())">Logout</button>
            </p>
        }
        @if (result == false && firstRun == false)
        {
            <span class="bg-danger p-2">Wrong userName or password</span>
        }
    </div>
</div>

@code{

    Boolean result;
    Boolean firstRun = true;
    bool isUserLoggedInGithub = false;

    async Task Login(LoginArgs args, string name)
    {

        StateHasChanged();

        UserSetting.GithubUserName = args.Username;
        UserSetting.GithubPassword = args.Password;
        result = GithubService.Login(UserSetting.GithubUserName, UserSetting.GithubPassword);
        firstRun = false;
        UserSetting.GithubLoggedIn = result;
        await SaveUserSettingsInLocalStorageAsync();
    }

    async Task Logout()
    {
        UserSetting.GithubLoggedIn = false;
        // to renew the LocalStorage after logout
        UserSetting = new UserSetting();
        await SaveUserSettingsInLocalStorageAsync();
    }
}
