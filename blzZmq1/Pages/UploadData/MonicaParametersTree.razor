@page "/monicaParametersTree"

@inherits Shared.BasePage

@* Usings *@
@using blzZmq1.Services

@* Injects *@

@* ___________________________________________________ *@


<div class="row">
    <div class="col-md-4" style="margin-bottom: 16px">
        <div class="row">

            <div style="margin-bottom: 16px">
                <h3>Files and directories</h3>
                <div id="tree-base">
                    <RadzenTree Change="@LogChange" Data="@entries" Expand="@LoadFiles" Style="width: 100%; height: 300px">
                        <RadzenTreeLevel Text="@GetTextForNode" Template="@FileOrFolderTemplate" />
                    </RadzenTree>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-8" style="margin-bottom: 16px">
        <div class="row">
            <h3>Replace File</h3>
            <RadzenUpload Multiple="false" Accept="*.json" Url="upload/Parameters" Style="margin-bottom: 20px;"
                          Progress="@((args) => OnProgress(args))" Complete="@Completed" />
        </div>
        <div class="row">
            <RadzenCard style="overflow: auto;height:500px;">
                <RadzenProgressBar Value="@fileUploadProgressStatus" Visible="@(fileUploadProgressStatus > 0)" Style="margin-bottom: 20px" />
            </RadzenCard>
        </div>
    </div>
</div>


@* ___________________________________________________ *@

@code{
    IEnumerable<string> entries = null;
    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();
    double fileUploadProgressStatus = 0;

    void Log(string eventName, string value)
    {
        events.Add(DateTime.Now, $"{eventName}: {value}");
    }

    void LogChange(TreeEventArgs args)
    {
        Log("Change", $"Item Text: {args.Text}");
    }


    protected override void OnInitialized()
    {
        //entries = Directory.GetDirectories(HostEnvironment.ContentRootPath)
        entries = Directory.GetDirectories("wwwroot/")
                           .Where(entry =>
                           {
                               var name = Path.GetFileName(entry);

                               return !name.StartsWith(".") && name != "bin" && name != "obj";
                           });
    }

    string GetTextForNode(object data)
    {
        return Path.GetFileName((string)data);
    }

    RenderFragment<RadzenTreeItem> FileOrFolderTemplate = (context) => builder =>
    {
        string path = context.Value as string;
        bool isDirectory = Directory.Exists(path);

        builder.OpenComponent<RadzenIcon>(0);
        builder.AddAttribute(1, "Icon", isDirectory ? "folder" : "insert_drive_file");
        if (!isDirectory)
        {
            builder.AddAttribute(2, "Style", "margin-left: 24px");
        }
        builder.CloseComponent();
        builder.AddContent(3, context.Text);
    };



    void LoadFiles(TreeExpandEventArgs args)
    {
        var directory = args.Value as string;

        args.Children.Data = Directory.EnumerateFileSystemEntries(directory);
        args.Children.Text = GetTextForNode;
        args.Children.HasChildren = (path) => Directory.Exists((string)path);
        args.Children.Template = FileOrFolderTemplate;

        Log("Expand", $"Text: {args.Text}");
    }

    void OnProgress(UploadProgressArgs args)
    {
        this.fileUploadProgressStatus = args.Progress;

        if (args.Progress == 100)
        {
            this.fileUploadProgressStatus = 0;
            Task.FromResult(ShowSuccessMessageAsync("File Upload", "File has been uploaded."));
        }
    }



}